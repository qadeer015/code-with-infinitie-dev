<%- include('../partials/_header', { title: 'Progress' }) %>

    <div class="row">
        <h2 class="fw-bold py-3">Progress</h2>
            <% if(userCourses.length > 0) { %>
                <div class="d-flex flex-wrap gap-2">
                    <% userCourses.forEach(userCourse=> { %>
                        <button type="button" class="btn btn-outline-primary course-select"
                            data-course-id="<%= userCourse.course_id %>">
                            <h5 class="card-title">
                                <%= userCourse.title %>
                            </h5>
                        </button>
                    <% }) %>
                </div>
            <% } else { %>
                <p class="text-muted">No course data available yet. Please enroll in a course to get started or visit <a href="/courses" class="text-primary">Courses</a></p>
            <% } %>
    </div>
    <div class="row">
        <h3 class="fw-medium-bold py-3">Activities</h3>
        <div class="d-flex align-items-center justify-content-between gap-2">
            <div class="card w-100 rounded-0 bg-primary-subtle" style="height: 300px;">
                <h4 class="mx-2">Assignments</h4>
                <div class="chart-container" style="position: relative; height: 250px;">
                    <canvas id="assignmentChart"></canvas>
                    <div id="noAssignmentData" class="d-none text-center mt-5">
                        <h5>No Record</h5>
                        <p class="text-muted">No assignment data available for this course</p>
                    </div>
                </div>
            </div>
            <!-- Replace the empty quiz card in progress.ejs with this: -->
            <div class="card w-100 rounded-0 bg-primary-subtle" style="height: 300px;">
                <h4 class="mx-2">Quizzes</h4>
                <div class="chart-container" style="position: relative; height: 250px;">
                    <canvas id="quizChart"></canvas>
                    <div id="noQuizData" class="d-none text-center mt-5">
                        <h5>No Record</h5>
                        <p class="text-muted">No quiz data available for this course</p>
                    </div>
                </div>
            </div>
            <div class="card w-100 rounded-0">
                <!-- <h4 class="mx-2">Quizzes</h4>
                <canvas id="quizChart"></canvas> -->
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const assignmentCtx = document.getElementById('assignmentChart');
            const noDataMessage = document.getElementById('noAssignmentData');
            let assignmentChart = null;

            function showNoDataMessage(show) {
                if (show) {
                    assignmentCtx.style.display = 'none';
                    noDataMessage.classList.remove('d-none');
                } else {
                    assignmentCtx.style.display = 'block';
                    noDataMessage.classList.add('d-none');
                }
            }

            async function fetchAssignmentData(courseId) {
                try {
                    const response = await fetch(`/assignments/stats?course_id=${courseId}`);
                    if (!response.ok) throw new Error('Network response was not ok');
                    return await response.json();
                } catch (error) {
                    console.error('Error fetching assignment data:', error);
                    return { total: 0, submitted: 0 };
                }
            }

            function destroyChart(chart) {
                if (chart) {
                    chart.destroy();
                }
            }

            async function updateAssignmentChart(courseId) {
                const data = await fetchAssignmentData(courseId);
                // Check if there's no data
                if (data.total === 0 && data.submitted === 0) {
                    destroyChart(assignmentChart);
                    showNoDataMessage(true);
                    return;
                }

                showNoDataMessage(false);
                destroyChart(assignmentChart);

                assignmentChart = new Chart(assignmentCtx, {
                    type: 'pie',
                    data: {
                        labels: ['Not-Submitted', 'Submitted'],
                        datasets: [{
                            data: [data.total - data.submitted, data.submitted],
                            backgroundColor: [
                                'rgba(54, 162, 235, 0.7)',
                                'rgba(75, 192, 192, 0.7)'
                            ],
                            borderColor: [
                                'rgba(54, 162, 235, 1)',
                                'rgba(75, 192, 192, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }

            // Set up click handlers
            document.querySelectorAll('.course-select').forEach(button => {
                button.addEventListener('click', function () {
                    // Remove active class from all buttons
        document.querySelectorAll('.course-select').forEach(btn => {
            btn.classList.remove('btn-primary', 'active');
        });
        // Add active class to clicked button
        this.classList.add('btn-primary', 'active');
                });
            });

            // Initialize
            const firstCourse = document.querySelector('.course-select');
           

            const quizCtx = document.getElementById('quizChart');
            const noQuizDataMessage = document.getElementById('noQuizData');
            let quizChart = null;

            function showNoQuizDataMessage(show) {
                if (show) {
                    quizCtx.style.display = 'none';
                    noQuizDataMessage.classList.remove('d-none');
                } else {
                    quizCtx.style.display = 'block';
                    noQuizDataMessage.classList.add('d-none');
                }
            }


            async function fetchQuizData(courseId) {
                try {
                    const response = await fetch(`/lectures/stats?course_id=${courseId}`);
                    if (!response.ok) throw new Error('Network response was not ok');
                    return await response.json();
                } catch (error) {
                    console.error('Error fetching quiz data:', error);
                    return { total: 0, attempted: 0 };
                }
            }

            async function updateQuizChart(courseId) {
                const data = await fetchQuizData(courseId);

                // Check if there's no data
                if (data.total === 0 && data.attempted === 0) {
                    destroyChart(quizChart);
                    showNoQuizDataMessage(true);
                    return;
                }

                showNoQuizDataMessage(false);
                destroyChart(quizChart);

                quizChart = new Chart(quizCtx, {
                    type: 'pie',
                    data: {
                        labels: ['Not Attempted', 'Attempted'],
                        datasets: [{
                            data: [data.total - data.attempted, data.attempted],
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.7)',
                                'rgba(153, 102, 255, 0.7)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(153, 102, 255, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }
            // Update the click handler to update both charts
            document.querySelectorAll('.course-select').forEach(button => {
                button.addEventListener('click', function () {
                    const courseId = this.dataset.courseId;
                    updateAssignmentChart(courseId);
                    updateQuizChart(courseId);
                });
            });

            // Initialize both charts
            if (firstCourse) {
                firstCourse.classList.add('btn-primary', 'active');
                const courseId = firstCourse.dataset.courseId;
                updateAssignmentChart(courseId);
                updateQuizChart(courseId);
            } else {
                showNoDataMessage(true);
                showNoQuizDataMessage(true);
            }


        });
    </script>

    <%- include('../partials/_footer') %>